/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/VictoriaMetrics/operator/api/operator/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VMSingleLister helps list VMSingles.
// All objects returned here must be treated as read-only.
type VMSingleLister interface {
	// List lists all VMSingles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.VMSingle, err error)
	// VMSingles returns an object that can list and get VMSingles.
	VMSingles(namespace string) VMSingleNamespaceLister
	VMSingleListerExpansion
}

// vMSingleLister implements the VMSingleLister interface.
type vMSingleLister struct {
	indexer cache.Indexer
}

// NewVMSingleLister returns a new VMSingleLister.
func NewVMSingleLister(indexer cache.Indexer) VMSingleLister {
	return &vMSingleLister{indexer: indexer}
}

// List lists all VMSingles in the indexer.
func (s *vMSingleLister) List(selector labels.Selector) (ret []*v1beta1.VMSingle, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.VMSingle))
	})
	return ret, err
}

// VMSingles returns an object that can list and get VMSingles.
func (s *vMSingleLister) VMSingles(namespace string) VMSingleNamespaceLister {
	return vMSingleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VMSingleNamespaceLister helps list and get VMSingles.
// All objects returned here must be treated as read-only.
type VMSingleNamespaceLister interface {
	// List lists all VMSingles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.VMSingle, err error)
	// Get retrieves the VMSingle from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.VMSingle, error)
	VMSingleNamespaceListerExpansion
}

// vMSingleNamespaceLister implements the VMSingleNamespaceLister
// interface.
type vMSingleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VMSingles in the indexer for a given namespace.
func (s vMSingleNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.VMSingle, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.VMSingle))
	})
	return ret, err
}

// Get retrieves the VMSingle from the indexer for a given namespace and name.
func (s vMSingleNamespaceLister) Get(name string) (*v1beta1.VMSingle, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("vmsingle"), name)
	}
	return obj.(*v1beta1.VMSingle), nil
}
