/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen-v0.30. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/VictoriaMetrics/operator/api/operator/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VMStaticScrapeLister helps list VMStaticScrapes.
// All objects returned here must be treated as read-only.
type VMStaticScrapeLister interface {
	// List lists all VMStaticScrapes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.VMStaticScrape, err error)
	// VMStaticScrapes returns an object that can list and get VMStaticScrapes.
	VMStaticScrapes(namespace string) VMStaticScrapeNamespaceLister
	VMStaticScrapeListerExpansion
}

// vMStaticScrapeLister implements the VMStaticScrapeLister interface.
type vMStaticScrapeLister struct {
	indexer cache.Indexer
}

// NewVMStaticScrapeLister returns a new VMStaticScrapeLister.
func NewVMStaticScrapeLister(indexer cache.Indexer) VMStaticScrapeLister {
	return &vMStaticScrapeLister{indexer: indexer}
}

// List lists all VMStaticScrapes in the indexer.
func (s *vMStaticScrapeLister) List(selector labels.Selector) (ret []*v1beta1.VMStaticScrape, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.VMStaticScrape))
	})
	return ret, err
}

// VMStaticScrapes returns an object that can list and get VMStaticScrapes.
func (s *vMStaticScrapeLister) VMStaticScrapes(namespace string) VMStaticScrapeNamespaceLister {
	return vMStaticScrapeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VMStaticScrapeNamespaceLister helps list and get VMStaticScrapes.
// All objects returned here must be treated as read-only.
type VMStaticScrapeNamespaceLister interface {
	// List lists all VMStaticScrapes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.VMStaticScrape, err error)
	// Get retrieves the VMStaticScrape from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.VMStaticScrape, error)
	VMStaticScrapeNamespaceListerExpansion
}

// vMStaticScrapeNamespaceLister implements the VMStaticScrapeNamespaceLister
// interface.
type vMStaticScrapeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VMStaticScrapes in the indexer for a given namespace.
func (s vMStaticScrapeNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.VMStaticScrape, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.VMStaticScrape))
	})
	return ret, err
}

// Get retrieves the VMStaticScrape from the indexer for a given namespace and name.
func (s vMStaticScrapeNamespaceLister) Get(name string) (*v1beta1.VMStaticScrape, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("vmstaticscrape"), name)
	}
	return obj.(*v1beta1.VMStaticScrape), nil
}
