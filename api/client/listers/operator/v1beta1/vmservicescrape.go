/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen-v0.30. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/VictoriaMetrics/operator/api/operator/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VMServiceScrapeLister helps list VMServiceScrapes.
// All objects returned here must be treated as read-only.
type VMServiceScrapeLister interface {
	// List lists all VMServiceScrapes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.VMServiceScrape, err error)
	// VMServiceScrapes returns an object that can list and get VMServiceScrapes.
	VMServiceScrapes(namespace string) VMServiceScrapeNamespaceLister
	VMServiceScrapeListerExpansion
}

// vMServiceScrapeLister implements the VMServiceScrapeLister interface.
type vMServiceScrapeLister struct {
	indexer cache.Indexer
}

// NewVMServiceScrapeLister returns a new VMServiceScrapeLister.
func NewVMServiceScrapeLister(indexer cache.Indexer) VMServiceScrapeLister {
	return &vMServiceScrapeLister{indexer: indexer}
}

// List lists all VMServiceScrapes in the indexer.
func (s *vMServiceScrapeLister) List(selector labels.Selector) (ret []*v1beta1.VMServiceScrape, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.VMServiceScrape))
	})
	return ret, err
}

// VMServiceScrapes returns an object that can list and get VMServiceScrapes.
func (s *vMServiceScrapeLister) VMServiceScrapes(namespace string) VMServiceScrapeNamespaceLister {
	return vMServiceScrapeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VMServiceScrapeNamespaceLister helps list and get VMServiceScrapes.
// All objects returned here must be treated as read-only.
type VMServiceScrapeNamespaceLister interface {
	// List lists all VMServiceScrapes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.VMServiceScrape, err error)
	// Get retrieves the VMServiceScrape from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.VMServiceScrape, error)
	VMServiceScrapeNamespaceListerExpansion
}

// vMServiceScrapeNamespaceLister implements the VMServiceScrapeNamespaceLister
// interface.
type vMServiceScrapeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VMServiceScrapes in the indexer for a given namespace.
func (s vMServiceScrapeNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.VMServiceScrape, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.VMServiceScrape))
	})
	return ret, err
}

// Get retrieves the VMServiceScrape from the indexer for a given namespace and name.
func (s vMServiceScrapeNamespaceLister) Get(name string) (*v1beta1.VMServiceScrape, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("vmservicescrape"), name)
	}
	return obj.(*v1beta1.VMServiceScrape), nil
}
