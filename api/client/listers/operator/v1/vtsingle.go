/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen-v0.32. DO NOT EDIT.

package v1

import (
	operatorv1 "github.com/VictoriaMetrics/operator/api/operator/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	listers "k8s.io/client-go/listers"
	cache "k8s.io/client-go/tools/cache"
)

// VTSingleLister helps list VTSingles.
// All objects returned here must be treated as read-only.
type VTSingleLister interface {
	// List lists all VTSingles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*operatorv1.VTSingle, err error)
	// VTSingles returns an object that can list and get VTSingles.
	VTSingles(namespace string) VTSingleNamespaceLister
	VTSingleListerExpansion
}

// vTSingleLister implements the VTSingleLister interface.
type vTSingleLister struct {
	listers.ResourceIndexer[*operatorv1.VTSingle]
}

// NewVTSingleLister returns a new VTSingleLister.
func NewVTSingleLister(indexer cache.Indexer) VTSingleLister {
	return &vTSingleLister{listers.New[*operatorv1.VTSingle](indexer, operatorv1.Resource("vtsingle"))}
}

// VTSingles returns an object that can list and get VTSingles.
func (s *vTSingleLister) VTSingles(namespace string) VTSingleNamespaceLister {
	return vTSingleNamespaceLister{listers.NewNamespaced[*operatorv1.VTSingle](s.ResourceIndexer, namespace)}
}

// VTSingleNamespaceLister helps list and get VTSingles.
// All objects returned here must be treated as read-only.
type VTSingleNamespaceLister interface {
	// List lists all VTSingles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*operatorv1.VTSingle, err error)
	// Get retrieves the VTSingle from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*operatorv1.VTSingle, error)
	VTSingleNamespaceListerExpansion
}

// vTSingleNamespaceLister implements the VTSingleNamespaceLister
// interface.
type vTSingleNamespaceLister struct {
	listers.ResourceIndexer[*operatorv1.VTSingle]
}
