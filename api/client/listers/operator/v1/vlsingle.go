/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen-v0.32. DO NOT EDIT.

package v1

import (
	operatorv1 "github.com/VictoriaMetrics/operator/api/operator/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	listers "k8s.io/client-go/listers"
	cache "k8s.io/client-go/tools/cache"
)

// VLSingleLister helps list VLSingles.
// All objects returned here must be treated as read-only.
type VLSingleLister interface {
	// List lists all VLSingles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*operatorv1.VLSingle, err error)
	// VLSingles returns an object that can list and get VLSingles.
	VLSingles(namespace string) VLSingleNamespaceLister
	VLSingleListerExpansion
}

// vLSingleLister implements the VLSingleLister interface.
type vLSingleLister struct {
	listers.ResourceIndexer[*operatorv1.VLSingle]
}

// NewVLSingleLister returns a new VLSingleLister.
func NewVLSingleLister(indexer cache.Indexer) VLSingleLister {
	return &vLSingleLister{listers.New[*operatorv1.VLSingle](indexer, operatorv1.Resource("vlsingle"))}
}

// VLSingles returns an object that can list and get VLSingles.
func (s *vLSingleLister) VLSingles(namespace string) VLSingleNamespaceLister {
	return vLSingleNamespaceLister{listers.NewNamespaced[*operatorv1.VLSingle](s.ResourceIndexer, namespace)}
}

// VLSingleNamespaceLister helps list and get VLSingles.
// All objects returned here must be treated as read-only.
type VLSingleNamespaceLister interface {
	// List lists all VLSingles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*operatorv1.VLSingle, err error)
	// Get retrieves the VLSingle from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*operatorv1.VLSingle, error)
	VLSingleNamespaceListerExpansion
}

// vLSingleNamespaceLister implements the VLSingleNamespaceLister
// interface.
type vLSingleNamespaceLister struct {
	listers.ResourceIndexer[*operatorv1.VLSingle]
}
